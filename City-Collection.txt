/**
 * Christopher Hernandez
 * Professor O'Toole
 * 9/10/2022
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import java.util.Collections;
public class CollectionsAssignment {
	public static void main(String[] args) {
		ArrayList<String> cityList = new ArrayList<String>();
		Scanner sc = new Scanner(System.in);
		
		//Add city names
		cityList.add("London");
		cityList.add("Orlando");
		cityList.add("Paris");
		cityList.add("Dubai");
		cityList.add("New York City");
		cityList.add("Los Angeles");
	
		System.out.println("Cities:");
		
		//Implement enhanced for loop
		for(String cityName : cityList) {
			System.out.println(cityName);
		}

		//Implement Collections.shuffle() to randomize the list of cities
		Collections.shuffle(cityList);
		System.out.println("List of cities being randomized: " + cityList);
		//Implement Collections.sort() to list the cities in alphabetical order
		Collections.sort(cityList);
		System.out.println("List of cities in alphabetical order: " + cityList);
		//Searching for a city that exists in the ArrayList
		System.out.println("A city that exists is: " + cityList.indexOf("Orlando"));
		//Searching for a city that does not exist in the ArrayList
		System.out.println("A city that does not exist is: " .indexOf("Berlin"));
		
		//Convert ArrayList to array
		String[] cityArray = new String[cityList.size()];
		cityArray = cityList.toArray(cityArray);
		for(String s : cityArray)
			System.out.println(s);
		
		//Convert array back to an ArrayList
		String[] cityArrayList = {"London", "Orlando", "Paris", "Dubai", "New York City", "Los Angeles"};
		ArrayList<String> stringCityList = new ArrayList(Arrays.asList(cityArrayList));
		for(String listCity : stringCityList)
			System.out.println(listCity);
	}
}

/* For question 4, I think Collections is a public class that consists exclusively static methods
that return collections and as for Collection it is a public interface that can duplicate elements
through orders, but there are moments where these duplicates don't work.
 */